	  precision mediump float;
	
	  varying vec2 vJuliaPosition;
	  varying vec2 vPosition;
	
	  void main(void)
	  {
	    float cx = vJuliaPosition.x;
	    float cy = vJuliaPosition.y;
	    float x = vPosition.x;
	    float y = vPosition.y;
	
	    float hue;
	    const float saturation = 0.6;
	    const float value = 1.0;
	    float hueRound;
	    int hueIndex;
	    float f;
	    float p;
	    float q;
	    float t;
	    float vel;
	    float x2 = x * x;
	    float y2 = y * y;
	
	    float tempX = 0.0;
	    int i = 60;
	    int runaway = 0;
	    for (int iter = 0; iter < 60; iter++) {
	      tempX = x2 - y2 + cx;
	      y = 2.0 * x * y + cy;
	      x = tempX;
	      x2 = x * x;
	      y2 = y * y;
	      vel = x2 + y2;
	      if (vel > 10000.0)
	      {
	        i = iter;
	        runaway = 1;
	        break;
	      }
	    }
	
	    if (runaway == 1)
	    {
	      hue = (float(i) - log(vel)/9.21) / 70.0;
	
	      // hue = (float(i) - log(vel)/9.21) / 70.0;
	      // hue = log2(sqrt(vel) * 2^(100-i))
	      // hue = log2(sqrt(vel)) + log2(2^(100-i))
	      // hue = log2(vel)/2 + (100-i) * log2(2)
	      // hue = log2(vel)/2 + 100 - i
	      // hue = (log2(vel)/2.0 + 100.0 - float(i)) / 70.0;
	
	      hueRound = hue * 6.0;
	      hueIndex = int(mod(float(int(hueRound)), 6.0));
	      f = fract(hueRound);
	      p = value * (1.0 - saturation);
	      q = value * (1.0 - f * saturation);
	      t = value * (1.0 - (1.0 - f) * saturation);
	
	      if (hueIndex == 0)
	        gl_FragColor = vec4(value, t, p, 1.0);
	      else if (hueIndex == 1)
	        gl_FragColor = vec4(q, value, p, 1.0);
	      else if (hueIndex == 2)
	        gl_FragColor = vec4(p, value, t, 1.0);
	      else if (hueIndex == 3)
	        gl_FragColor = vec4(p, q, value, 1.0);
	      else if (hueIndex == 4)
	        gl_FragColor = vec4(t, p, value, 1.0);
	      else if (hueIndex == 5)
	        gl_FragColor = vec4(value, p, q, 1.0);
	
	    }
	    else
	    {
	      //gl_FragColor = vec4(0.0, fract(vel), 0.0, 1.0);
	      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
	    }
	  }